<?php

/**
 * Spex: An asset and template management module for the ProcessWire.
 * 
 * By Jonathan Dart
 * No Licence
 * 
 * http://metricmarketing.ca/blog/author/jonathan-dart
 *
 */
class Spex extends WireData implements Module
{
	protected 
		$capturedJs = '',
		$layout = 'default',
		$templateVars = array(),
		$baseLayout = '_base',
		$slots = array(),
		$images = array(),
		$lateLoad = array(),
		$breadcrumbs = null;

	public static function getModuleInfo() 
	{
		return array(
			'title' => 'Spex', 
			'version' => 81, 
			'summary' => 'An asset and template management module.',
			'href' => 'https://github.com/jdart/Spex',
			'singular' => true, 
			'requires' => array('AllInOneMinify'),
			'autoload' => true,
		);
	}

	public function ___install()
	{
		$tpl_dir = $this->config->paths->templates;

		$this->createDir($tpl_dir.'layouts');
		$this->copyFile(__DIR__.'/example-site/layouts/_base.php', $tpl_dir.'layouts/_base.php');
		$this->copyFile(__DIR__.'/example-site/layouts/one-column.php', $tpl_dir.'layouts/one-column.php');
		$this->createDir($tpl_dir.'partials');
		$this->copyFile(__DIR__.'/example-site/_init.php', $tpl_dir.'_init.php');
	}

	public function copyFile($source, $dest, $overwrite=false)
	{
		if ($overwrite && is_file($dest))
			unlink($dest);

		if (!is_file($dest)) {
			copy($source, $dest);
			chmod($dest, octdec($this->config->chmodFile));
		}
	}

	public function createDir($path)
	{
		if (!is_dir($path))
			mkdir($path, octdec($this->config->chmodDir), true);
	}

	public function init() 
	{
		$this->addHookBefore('TemplateFile::render', $this, 'templateFileRenderBefore');
		$this->addHookAfter('TemplateFile::render', $this, 'templateFileRenderAfter');
	}

	public function enableProceduralHelpers()
	{
		require_once __DIR__.'/spex.php';
	}

	public function templateFileRenderBefore($event)
	{
		if (!$this->isActiveForPage($this->page) || !$this->isActiveForEvent($event))
			return;

		extract($this->getTemplateVars());

		$init_file = $this->config->paths->templates . '_init.php';

		if (is_file($init_file))		
			require_once $init_file;

		foreach ($this->getTemplateVars() as $key => $value)
			$event->object->setGlobal($key, $value);
	}

	public function templateFileRenderAfter($event)
	{
		if (!$this->isActiveForPage($this->page) || !$this->isActiveForEvent($event))
			return;

		if (!$this->layout)
			return;

		$template_output = $event->return;

		extract($this->getTemplateVars());		

		if ($this->layout === $this->baseLayout) { // skip the layout

			$layout_body = $template_output;
			
		} else { // wrap page output in layout

			ob_start();
			require $config->paths->templates.'layouts/'.$this->layout.'.php';
			$layout_body = ob_get_clean();
		}

		ob_start();

		// wrap layout output with base layout (head and assets stuff)
		require $config->paths->templates.'layouts/'.$this->baseLayout.'.php';

		$event->return = ob_get_clean();
	}

	public function pageIsFormBuilder($page)
	{
		$form_builder = $this->pages->get('template=form-builder');

		return $form_builder && $page->rootParent->id == $form_builder->id;
	}

	public function isActiveForPage($page)
	{
		return $page->template->name != 'admin' && !$this->pageIsFormBuilder($page);
	}

	public function isActiveForEvent($event)
	{
		$filename = $event->object->get('filename');

		return strpos($filename, '/FormBuilder/') === false;
	}

	public function setLayout($layout)
	{
		$this->layout = $layout;
	}

	public function setBaseLayout($baseLayout)
	{
		$this->baseLayout = $baseLayout;
	}

	public function getLayout()
	{
		return $this->layout;
	}

	public function addTemplateVar($key, $value)
	{
		$this->templateVars[$key] = $value;
	}

	public function getTemplateVars()
	{
		return array_merge(
			fuel()->getArray(), 
			array('spex' => $this, 'metric' => $this),
			array('slots' => $this->slots),
			$this->templateVars
		);
	}

	public function addScript($input, $root=null)
	{
		if (!is_array($input))
			$input = array($input);

		foreach ($input as $js)
			$this->config->scripts->add($js);
	}

	public function getScripts()
	{
		return $this->config->scripts->getIterator()->getArrayCopy();
	}

	public function addStyle($input, $root=null)
	{
		if (!is_array($input))
			$input = array($input);

		foreach ($input as $css)
			$this->config->styles->add($css);
	}


	public function getStyles()
	{
		return $this->config->styles->getIterator()->getArrayCopy();
	}

	public function addImage($src)
	{
		$this->images[] = $src;
		return $src;
	}

	public function includeDocReady()
	{
		if ( ! $this->capturedJs && ! $this->images && ! $this->lateLoad)
			return;

?><script type="text/javascript">
(function($){
	<?php if ($this->capturedJs): ?>
	$(function(){
		<?php echo $this->capturedJs ?>
	});
	<?php endif ?>
	<?php if ($this->images || $this->lateLoad): ?>
	$(window).load(function(){
		<?php if ($this->images): ?>
		$.each(<?php echo json_encode($this->images) ?>, function(i, src){
			$('<img/>')[0].src = src;
		});
		<?php endif ?>
		<?php if ($this->lateLoad): ?>
		$.each(<?php echo json_encode($this->lateLoad) ?>, function(id, html){
			$('#'+id).replaceWith(html);
		});
		<?php endif ?>
	});
	<?php endif ?>
})(jQuery);
</script><?php
	}

	public function docReady($js=null)
	{
		static $captureStarted = false;

		if (!is_null($js)) {
			$this->capturedJs .= $js.';';
			return;
		}

		if (empty($captureStarted)) { 
			$captureStarted = true;
			ob_start();
			return;
		}

		$this->capturedJs .= str_ireplace(
			array('<script>', '<script type="text/javascript">', '</script>', "<script type='text/javascript'>"), 
			'', 
			ob_get_clean()
		).';';

		$captureStarted = false;
	}

	/**
	 * @param integer $cache_lifetime In seconds, null for no cacheing
	 * @param string|bool $cache_key If a string then treated as cache key, if true then use the url, if false then always the same.
	 */
	public function partial($name, $template_vars=array(), $cache_lifetime=null, $cache_key=false)
	{
		if ( ! is_null($cache_lifetime)) {

			$cache_hash_string = $name;

			if (is_string($cache_key))
				$cache_hash_string .= ':'.$cache_key;
			elseif ($cache_key === true)
				$cache_hash_string .= ':'.$_SERVER['REQUEST_URI'];

			$cache_key = md5($cache_hash_string);

			$cache = $this->modules->get('MarkupCache');

			if ($data = $cache->get($cache_key, $cache_lifetime)) {

				$data = unserialize($data);

				foreach ($data['styles'] as $style)
					$this->addStyle($style);

				foreach ($data['scripts'] as $script)
					$this->addScript($script);

				foreach ($data['lateLoad'] as $lateLoad)
					$this->lateLoadMarkup($lateLoad, false);

				foreach ($data['images'] as $image)
					$this->addImage($image);

				$this->docReady($data['docReady']);

				return $data['body'];
			}
		}

		$path = sprintf('%spartials/%s.php', $this->config->paths->templates, $name);

		if (is_array($template_vars))
			$template_vars = array_merge($this->getTemplateVars(), $template_vars);
		else
			$template_vars = $this->getTemplateVars();

		if (is_file($path)) {

			$stylesBefore = clone $this->config->styles;
			$scriptBefore = clone $this->config->scripts;
			$imagesBefore = $this->images;
			$lateLoadBefore = $this->lateLoad;
			$docReadyBefore = $this->capturedJs;

			extract($template_vars);

			ob_start();

			require $path;

			$data = array(
				'body' => ob_get_clean(), 
				'styles' => $this->getArrayDiff($this->config->styles, $stylesBefore),
				'scripts' => $this->getArrayDiff($this->config->scripts, $scriptBefore),
				'docReady' => str_replace($docReadyBefore, '', $this->capturedJs),
				'lateLoad' => $this->getArrayDiff($this->lateLoad, $lateLoadBefore),
				'images' => $this->getArrayDiff($this->images, $imagesBefore),
			);

			if ( ! is_null($cache_lifetime)) {
				$cache->save(serialize($data));
			}

			return $data['body'];
		}

		return '';
	}

	public function getArrayDiff($after, $before)
	{
		if ($after instanceof FilenameArray)
			$after = $after->getIterator()->getArrayCopy();
		if ($before instanceof FilenameArray)
			$before = $before->getIterator()->getArrayCopy();

		return array_diff($after, $before);
	}

	public function slot($name, $value=null)
	{
		if (is_null($value)) {
			if ($this->hasSlot($name))
				return $this->slots[$name];
			return false;
		}

		$this->slots[$name] = $value;
	}

	public function hasSlot($name)
	{
		return isset($this->slots[$name]);
	}

	public function captureSlot($name=null)
	{
		static $captureStarted = false;

		if (empty($captureStarted)) { 
			$captureStarted = true;
			ob_start();
			return;
		}

		$this->slots[$name] = ob_get_clean();

		$captureStarted = false;
	}

	public function lateLoad()
	{
		static $captureStarted = false;

		if (empty($captureStarted)) { 
			$captureStarted = true;
			ob_start();
			return;
		}

		$this->lateLoadMarkup(ob_get_clean());

		$captureStarted = false;
	}

	protected function lateLoadMarkup($markup, $echo=true)
	{
		$key = 'late-load-'.count($this->lateLoad);

		$this->lateLoad[$key] = $markup;

		if ($echo)
			echo '<div id="'.$key.'"></div>';

		$captureStarted = false;
	}

	public function addBreadcrumb($url, $title)
	{
		$breadcrumbs = $this->getBreadcrumbs();
		$breadcrumb = new Breadcrumb($url, $title);
		$breadcrumbs->add($breadcrumb);
	}

	public function getBreadcrumbs()
	{
		if (!isset($this->breadcrumbs)) {
			$this->breadcrumbs = new Breadcrumbs;
		}

		return $this->breadcrumbs;
	}
}
