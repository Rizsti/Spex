<?php

/**
 * Spex: An asset and template management module for the ProcessWire.
 * 
 * By Jonathan Dart
 * No Licence
 * 
 * http://metricmarketing.ca/blog/author/jonathan-dart
 *
 */
class Spex extends WireData implements Module 
{
	protected 
		$capturedJs = '',
		$layout = 'default',
		$templateVars = array(),
		$baseLayout = '_base',
		$slots = array(),
		$images = array(),
		$lateLoad = array();

	public static function getModuleInfo() 
	{
		return array(
			'title' => 'Spex', 
			'version' => 42, 
			'summary' => 'An asset and template management module.',
			'href' => 'https://github.com/jdart/Spex',
			'singular' => true, 
			'autoload' => true, 
		);
	}

	public function ___install()
	{
		$tpl_dir = $this->config->paths->templates;

		$this->createDir($tpl_dir.'layouts');
		$this->copyFile(__DIR__.'/example-site/layouts/_base.php', $tpl_dir.'layouts/_base.php');
		$this->copyFile(__DIR__.'/example-site/layouts/one-column.php', $tpl_dir.'layouts/one-column.php');
		$this->createDir($tpl_dir.'partials');
		$this->copyFile(__DIR__.'/example-site/_init.php', $tpl_dir.'_init.php');
	}

	public function copyFile($source, $dest, $overwrite=false)
	{
		if ($overwrite && is_file($dest))
			unlink($dest);

		if (!is_file($dest)) {
			copy($source, $dest);
			chmod($dest, octdec($this->config->chmodFile));
		}
	}

	public function createDir($path)
	{
		if (!is_dir($path))
			mkdir($path, octdec($this->config->chmodDir), true);
	}

	public function init() 
	{
		$this->addHookBefore('TemplateFile::render', $this, 'templateFileRenderBefore');
		$this->addHookAfter('TemplateFile::render', $this, 'templateFileRenderAfter');

		$this->config->scripts->add($this->config->urls->siteModules.'Spex/lib/jquery.js');
	}

	public function enableProceduralHelpers()
	{
		require_once __DIR__.'/spex.php';
	}

	public function templateFileRenderBefore($event)
	{
		if (!$this->isActiveForPage($this->page))
			return;

		extract($this->getTemplateVars());

		$init_file = $this->config->paths->templates . '_init.php';

		if (is_file($init_file))		
			require_once $init_file;

		foreach ($this->getTemplateVars() as $key => $value)
			$event->object->setGlobal($key, $value);
	}

	public function templateFileRenderAfter($event)
	{
		if (!$this->isActiveForPage($this->page))
			return;

		if (!$this->layout)
			return;

		$template_output = $event->return;

		extract($this->getTemplateVars());		

		if ($this->layout === $this->baseLayout) { // skip the layout

			$layout_body = $template_output;
			
		} else { // wrap page output in layout

			ob_start();
			require $config->paths->templates.'layouts/'.$this->layout.'.php';
			$layout_body = ob_get_clean();
		}

		ob_start();

		// wrap layout output with base layout (head and assets stuff)
		require $config->paths->templates.'layouts/'.$this->baseLayout.'.php';

		$event->return = ob_get_clean();
	}

	public function pageIsAdmin($page)
	{
		return $page->rootParent->id == $this->config->adminRootPageID;
	}

	public function pageIsFormBuilder($page)
	{
		$form_builder = $this->pages->get('template=form-builder');

		return $form_builder && $page->rootParent->id == $form_builder->id;
	}

	public function isActiveForPage($page)
	{
		return !$this->pageIsAdmin($page) && !$this->pageIsFormBuilder($page);
	}


	public function setLayout($layout)
	{
		$this->layout = $layout;
	}

	public function setBaseLayout($baseLayout)
	{
		$this->baseLayout = $baseLayout;
	}

	public function getLayout()
	{
		return $this->layout;
	}

	public function addTemplateVar($key, $value)
	{
		$this->templateVars[$key] = $value;
	}

	public function getTemplateVars()
	{
		return array_merge(
			fuel()->getArray(), 
			array('spex' => $this, 'metric' => $this),
			array('slots' => $this->slots),
			$this->templateVars
		);
	}

	public function includeHeadScripts()
	{
		$config = $this->config;

		echo '<script type="text/javascript">'.file_get_contents($config->paths->siteModules.'Spex/lib/modernizr.js').'</script>';

		echo <<<JS
<script type="text/javascript">(function(){var method;var noop=function(){};var methods=['assert','clear','count','debug','dir','dirxml','error','exception','group','groupCollapsed','groupEnd','info','log','markTimeline','profile','profileEnd','table','time','timeEnd','timeStamp','trace','warn'];var length=methods.length;var console=(window.console=window.console||{});while(length--){method=methods[length];if(!console[method]){console[method]=noop}}}());</script>
JS;
	}

	public function addScript($input, $root=null)
	{
		if (!is_array($input))
			$input = array($input);

		if (is_null($root))
			$root = $this->config->urls->templates;

		foreach ($input as $js)
			$this->config->scripts->add($root.$js);
	}

	public function includeScripts(array $javascripts=null, $root=null)
	{
		$config = $this->config;
		$docReady = false;

		if (is_null($javascripts)) {
			$javascripts = $this->config->scripts->getIterator()->getArrayCopy();
			$docReady = true;
		}

		if (!is_null($root))
			foreach ($javascripts as &$js)
				$js = $root.$js;

		if ( ! $this->config->debug) {

			?>
			<script 
				type="text/javascript" 
				src="<?php 
					echo $this->config->urls->siteModules,
						'Minify/min/?f=',
						implode(',', $javascripts)
				?>"
			></script>
			<?php

		} else {

			foreach ($javascripts as $javascript): ?>
				<script type="text/javascript" src="<?php echo $javascript ?>"></script>
			<?php endforeach;
		}
		
		if ($docReady)
			$this->includeDocReady();
	}

	public function addStyle($input, $root=null)
	{
		if (!is_array($input))
			$input = array($input);

		if (is_null($root))
			$root = $this->config->urls->templates;
		
		foreach ($input as $css)
			$this->config->styles->add($root.$css);
	}

	public function addStylesheet($input, $root=null) 
	{
		$this->addStyle($input, $root);
	}

	/**
	 * Converts a .less file into a .css file
	 *
	 * foo/bar.less would become foo/~bar.css
	 *
	 * @return string The path to the new .css file.
	 */
	public function compileStyle($stylesheet)
	{
		static $lessc;

		if (empty($lessc))
			$lessc = $this->getLessc();

		$sheetInfo1 = parse_url($stylesheet);
		$sheetInfo2 = pathinfo($sheetInfo1['path']);
     
		if ($sheetInfo2['extension'] != 'less')
			return $sheetInfo1['path'];

		$new_relative_path = $sheetInfo2['dirname'] . '/~' . $sheetInfo2['filename'] . '.css';

		try {
			$lessc->checkedCompile(
				$this->config->paths->root . trim($stylesheet, '/'), 
				$this->config->paths->root . trim($new_relative_path, '/')
			);						
		} catch (Exception $e) {
			echo "fatal error: " . $e->getMessage();
		}

		return $new_relative_path;
	}

	public function includeStyles(array $stylesheets=null, $root=null)
	{
		if (is_null($stylesheets))
			$stylesheets = $this->config->styles->getIterator()->getArrayCopy();

		if (!is_null($root))
			foreach ($stylesheets as &$style)
				$style = $root.$style;

		if ( ! $this->config->debug) {

			foreach ($stylesheets as &$stylesheet)
				$stylesheet = $this->compileStyle($stylesheet);

			?>
			<link 
				href="<?php
					echo $this->config->urls->siteModules, 
						'Minify/min/?f=', 
						implode(",", $stylesheets) 
				?>" 
				rel="stylesheet" 
				type="text/css" 
			/>
			<?php

		} else {

			foreach ($stylesheets as $stylesheet): ?>
				<link rel="stylesheet/less" media="screen" href="<?php echo $stylesheet ?>">
			<?php endforeach ?>

			<script type="text/javascript">
				window.less = { env: "development" };
			</script>	
			<!--[if lt IE 9]>
				<script type="text/javascript" src="<?php echo $this->config->urls->siteModules ?>Spex/lib/es5-shim.js"></script>
			<![endif]-->

			<script type="text/javascript" src="<?php echo $this->config->urls->siteModules ?>Spex/lib/less.js"></script>
			<?php
		}
	}

	public function getLessc()
	{
		require_once __DIR__.'/lib/lessphp/lessc.inc.php';

		$less = new lessc;

		$less->setImportDir(array(
			$this->config->paths->templates, 
			$this->config->paths->templates.'styles/'
		));

		return $less;
	}

	public function addImage($src)
	{
		$this->images[] = $src;
		return $src;
	}

	public function includeDocReady()
	{
		?>
		<script type="text/javascript">
			jQuery(function(){
				<?php echo $this->capturedJs ?>
			});
			$(window).load(function(){
				$.each(<?php echo json_encode($this->images) ?>, function(i, src){
					$('<img/>')[0].src = src;
				});
				$.each(<?php echo json_encode($this->lateLoad) ?>, function(id, html){
					$('#'+id).replaceWith(html);
				});
			});
		</script>
		<?php
	}

	public function docReady($js=null)
	{
		static $captureStarted = false;

		if (!is_null($js)) {
			$this->capturedJs .= ';'.$js;
			return;
		}

		if (empty($captureStarted)) { 
			$captureStarted = true;
			ob_start();
			return;
		}

		$this->capturedJs .= ';' . str_ireplace(
			array('<script>', '<script type="text/javascript">', '</script>', "<script type='text/javascript'>"), 
			'', 
			ob_get_clean()
		);

		$captureStarted = false;
	}

	/**
	 * @param integer $cache_lifetime In seconds, null for no cacheing
	 * @param string|bool $cache_key If a string then treated as cache key, if true then use the url, if false then always the same.
	 */
	public function partial($name, $template_vars=array(), $cache_lifetime=null, $cache_key=false)
	{
		if ( ! is_null($cache_lifetime)) {

			$cache_hash_string = $name;

			if (is_string($cache_key))
				$cache_hash_string .= ':'.$cache_key;
			elseif ($cache_key === true)
				$cache_hash_string .= ':'.$_SERVER['REQUEST_URI'];

			$cache_key = md5($cache_hash_string);

			$cache = $this->modules->get('MarkupCache');

			if ($data = $cache->get($cache_key, $cache_lifetime))
				return $data;
		}

		$path = sprintf('%spartials/%s.php', $this->config->paths->templates, $name);

		if (is_array($template_vars))
			$template_vars = array_merge($this->getTemplateVars(), $template_vars);
		else
			$template_vars = $this->getTemplateVars();

		extract($template_vars);

		if (is_file($path)) {

			ob_start();
			require $path;
			$data = ob_get_clean();

			if ( ! is_null($cache_lifetime)) {
				$cache->save($data);
			}

			return $data;
		}

		return '';
	}

	public function slot($name, $value=null)
	{
		if (is_null($value)) {
			if ($this->hasSlot($name))
				return $this->slots[$name];
			return false;
		}

		$this->slots[$name] = $value;
	}

	public function hasSlot($name)
	{
		return isset($this->slots[$name]);
	}

	public function captureSlot($name=null)
	{
		static $captureStarted = false;

		if (empty($captureStarted)) { 
			$captureStarted = true;
			ob_start();
			return;
		}

		$this->slots[$name] = ob_get_clean();

		$captureStarted = false;
	}

	public function lateLoad()
	{
		static $captureStarted = false;

		if (empty($captureStarted)) { 
			$captureStarted = true;
			ob_start();
			return;
		}

		$key = 'late-load-'.count($this->lateLoad);

		$this->lateLoad[$key] = ob_get_clean();

		echo '<div id="'.$key.'"></div>';

		$captureStarted = false;
	}
}
